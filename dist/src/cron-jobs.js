"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startAllCronJobs = startAllCronJobs;
exports.stopAllCronJobs = stopAllCronJobs;
const node_cron_1 = __importDefault(require("node-cron"));
const userServices_1 = require("./userServices");
const App_1 = require("./App");
let deleteExpiredJob;
let notifyJob;
let motivationJob;
function startAllCronJobs(bot) {
    // Every day at 00:00 check for expired users
    deleteExpiredJob = node_cron_1.default.schedule('0 0 * * *', async () => {
        try {
            console.log('üïõ –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
            await (0, userServices_1.deleteExpiredUsers)(bot);
            console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
        }
    });
    // Every day at 09:00 notify users with expiring access
    notifyJob = node_cron_1.default.schedule('0 9 * * *', async () => {
        try {
            console.log('üì¨ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è–º –¥–æ—Å—Ç—É–ø—É...');
            await (0, userServices_1.notifyExpiringUsers)(bot);
            console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è–º –¥–æ—Å—Ç—É–ø—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
        }
    });
    // Every Monday, Wednesday, and Friday at 10:00 send motivation message
    motivationJob = node_cron_1.default.schedule('0 10 * * 1, 3, 5', async () => {
        try {
            const users = await (0, userServices_1.getAllUsers)();
            const date = new Date().getDate();
            const motivationMessage = App_1.motivationMessageList.find((m) => m.messageId === date);
            const motivationText = motivationMessage?.messageText || '–¢—è–≥–Ω–∏—Å—å, –ø–æ–∫–∏ –Ω–µ –≤—Ç—è–≥–Ω–µ—à—Å—è. –Ü —Ç–æ–¥—ñ —Ç—è–≥–Ω–∏—Å—å —â–µ! üí´';
            for (const user of users) {
                bot.telegram.sendMessage(user.user_id, motivationText, { parse_mode: 'HTML' }).catch(err => {
                    console.error(`‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.user_id}:`, err);
                });
            }
            console.log('‚úÖ –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ');
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
        }
    });
    console.log('‚úÖ –£—Å—ñ cron –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ.');
}
function stopAllCronJobs() {
    if (deleteExpiredJob)
        deleteExpiredJob.stop();
    if (notifyJob)
        notifyJob.stop();
    if (motivationJob)
        motivationJob.stop();
    console.log('üõë –£—Å—ñ cron –∑–∞–≤–¥–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.');
}
//# sourceMappingURL=cron-jobs.js.map