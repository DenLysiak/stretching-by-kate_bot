"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startAllCronJobs = startAllCronJobs;
exports.stopAllCronJobs = stopAllCronJobs;
const node_cron_1 = __importDefault(require("node-cron"));
const fs = __importStar(require("fs"));
const userServices_1 = require("./userServices");
let deleteExpiredJob;
let notifyJob;
let motivationJob;
const motivationMessageList = JSON.parse(fs.readFileSync('./data/motivationAPI.json', 'utf-8'));
const asyncDeleteExpiredUsers = async (bot) => {
    try {
        console.log('üïõ –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
        await (0, userServices_1.deleteExpiredUsers)(bot);
        console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    }
    catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    }
};
const asyncNotifyJob = async (bot) => {
    try {
        console.log('üì¨ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è–º –¥–æ—Å—Ç—É–ø—É...');
        await (0, userServices_1.notifyExpiringUsers)(bot);
        console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è–º –¥–æ—Å—Ç—É–ø—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    }
    catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    }
};
const asyncMotivationJob = async (bot) => {
    try {
        const users = await (0, userServices_1.getAllUsers)();
        const date = new Date().getDate();
        const motivationMessage = motivationMessageList.find((m) => m.messageId === date);
        const motivationText = motivationMessage?.messageText || '–¢—è–≥–Ω–∏—Å—å, –ø–æ–∫–∏ –Ω–µ –≤—Ç—è–≥–Ω–µ—à—Å—è. –Ü —Ç–æ–¥—ñ —Ç—è–≥–Ω–∏—Å—å —â–µ! üí´';
        for (const user of users) {
            bot.telegram.sendMessage(user.user_id, motivationText, { parse_mode: 'HTML' }).catch(err => {
                console.error(`‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.user_id}:`, err);
            });
        }
        console.log('‚úÖ –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ');
    }
    catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
    }
};
function startAllCronJobs(bot) {
    // Every day at 00:00 check for expired users
    deleteExpiredJob = node_cron_1.default.schedule('16 8 * * *', () => asyncDeleteExpiredUsers(bot));
    // Every day at 09:00 notify users with expiring access
    notifyJob = node_cron_1.default.schedule('17 8 * * *', () => asyncNotifyJob(bot));
    // Every Monday, Wednesday, and Friday at 10:00 send motivation message
    motivationJob = node_cron_1.default.schedule('19 8 * * 1,3,5', () => asyncMotivationJob(bot));
    console.log('‚úÖ –£—Å—ñ cron –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ.');
}
function stopAllCronJobs() {
    if (deleteExpiredJob)
        deleteExpiredJob.stop();
    if (notifyJob)
        notifyJob.stop();
    if (motivationJob)
        motivationJob.stop();
    console.log('‚ùå –£—Å—ñ cron –∑–∞–≤–¥–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ.');
}
//# sourceMappingURL=cron-jobs.js.map