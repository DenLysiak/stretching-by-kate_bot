"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addUserIfNotExists = addUserIfNotExists;
exports.removeUser = removeUser;
exports.deleteExpiredUsers = deleteExpiredUsers;
exports.isUserAllowed = isUserAllowed;
exports.getAllUsers = getAllUsers;
exports.notifyExpiringUsers = notifyExpiringUsers;
const telegraf_1 = require("telegraf");
const App_1 = require("./App");
const googleDriveService_1 = require("./googleDriveService");
async function addUserIfNotExists(user) {
    try {
        const check = App_1.db.prepare('SELECT user_id FROM allowed_users WHERE user_id = ?').get(user.user_id);
        if (check) {
            return `üîí –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID ${user.user_id} –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π.`;
        }
        const now = new Date().toISOString();
        const endDate = user.permission_type === 'temporary'
            ? new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString()
            : null;
        const insert = App_1.db.prepare(`
      INSERT INTO allowed_users 
        (user_id, first_name, last_name, username, date_added, permission_type, end_date)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `);
        insert.run(user.user_id, user.first_name ?? null, user.last_name ?? null, user.username ?? null, now, user.permission_type, endDate);
        await (0, googleDriveService_1.uploadDatabaseToDrive)();
        return `‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.first_name ?? ''} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ${user.permission_type === 'temporary' ? ' –Ω–∞ 90 –¥–Ω—ñ–≤' : ' –Ω–∞–∑–∞–≤–∂–¥–∏'}.`;
    }
    catch (err) {
        console.error('Error while adding user:', err);
        return '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.';
    }
}
async function removeUser(userId) {
    const stmt = App_1.db.prepare('DELETE FROM allowed_users WHERE user_id = ?');
    const result = stmt.run(userId);
    if (result.changes > 0) {
        await (0, googleDriveService_1.uploadDatabaseToDrive)();
        return true;
    }
    return false;
}
async function deleteExpiredUsers(bot) {
    const now = new Date().toISOString();
    const stmt = App_1.db.prepare(`
    DELETE FROM allowed_users 
    WHERE permission_type = 'temporary' 
      AND end_date IS NOT NULL 
      AND end_date < ?
  `);
    const expiredUsers = stmt.all(now);
    if (expiredUsers.length === 0) {
        console.log('‚úÖ –ù–µ–º–∞—î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.');
        return;
    }
    const deleteStmt = App_1.db.prepare(`
    DELETE FROM allowed_users 
    WHERE user_id = ?
  `);
    for (const user of expiredUsers) {
        deleteStmt.run(user.user_id);
    }
    await (0, googleDriveService_1.uploadDatabaseToDrive)();
    const message = `üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${expiredUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º:\n\n` +
        expiredUsers.map(u => `‚Ä¢ ${u.first_name ?? ''} @${u.username ?? ''} (ID: ${u.user_id})`).join('\n');
    console.log(message);
    await bot.telegram.sendMessage(App_1.ADMIN, message);
}
async function isUserAllowed(userId) {
    const stmt = App_1.db.prepare('SELECT 1 FROM allowed_users WHERE user_id = ?');
    return !!stmt.get(userId);
}
async function getAllUsers() {
    const stmt = App_1.db.prepare('SELECT * FROM allowed_users');
    return stmt.all();
}
async function notifyExpiringUsers(bot) {
    const users = await getAllUsers();
    const now = new Date();
    for (const user of users) {
        if (user.permission_type !== 'temporary' || !user.end_date)
            continue;
        const endDate = new Date(user.end_date);
        const timeDiff = endDate.getTime() - now.getTime();
        const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
        if (daysLeft !== 10 && daysLeft !== 1)
            continue;
        const endDateFormatted = endDate.toLocaleDateString('uk-UA');
        const notifyText = `‚ö†Ô∏è –í–∞—à —Ç–∏–º—á–∞—Å–æ–≤–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω${daysLeft === 1 ? '—å' : '—ñ–≤'} (–¥–æ ${endDateFormatted}).\n\n–•–æ—á–µ—Ç–µ –ø–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø?`;
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try {
            await bot.telegram.sendMessage(user.user_id, notifyText, telegraf_1.Markup.inlineKeyboard([
                telegraf_1.Markup.button.callback('üîÅ –ü–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø', `request_extend_${user.user_id}`)
            ]));
        }
        catch (error) {
            if (error instanceof Error) {
                console.warn(`‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.user_id}:`, error.message);
            }
            else {
                console.warn(`‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.user_id}:`, error);
            }
        }
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        try {
            await bot.telegram.sendMessage(App_1.ADMIN, `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${user.username ?? '–Ω–µ–≤—ñ–¥–æ–º–æ'} (ID: ${user.user_id}) –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω${daysLeft === 1 ? '—å' : '—ñ–≤'} (${endDateFormatted}).`);
        }
        catch (error) {
            if (error instanceof Error) {
                console.warn(`‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É:`, error.message);
            }
            else {
                console.warn(`‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É:`, error);
            }
        }
    }
}
//# sourceMappingURL=userServices.js.map