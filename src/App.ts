import { Context, Markup, Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import * as fs from 'fs';
import { VideoType } from './types';
import { deletePreviousVideo } from './deletePreviousVideo';
import { addUserIfNotExists, getAllUsers, isUserAllowed, removeUser } from './userServices';
import { sendWelcomeMessage } from './sendWelcome';
import path from 'path';
import { getDB, initDB } from '../data/db';
import Database from 'better-sqlite3';
import { downloadDatabaseFromDrive } from './googleDriveService';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);
const videoList = JSON.parse(fs.readFileSync('./data/videoAPI.json', 'utf-8'));
const fileIdMap = new Map<string, string>();
const lastVideoMessageMap = new Map<number, number>();
const dbPath = path.resolve(__dirname, '../../data/users.db');

export let db: Database.Database;

// method to keep track of pending requests
const pendingRequests = new Map<number, { chatId: number, messageId: number }>();

// Set to track recent menu clicks to prevent spam
const recentMenuClicks = new Set<number>();

function debounceAction(handler: (ctx: Context) => Promise<void>, delay = 750) {
  return async (ctx: Context) => {
    const userId = ctx.from?.id;

    if (!userId) {
      return ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
    }

    if (recentMenuClicks.has(userId)) {
      return ctx.answerCbQuery('‚è≥ –ó–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏...');
    }

    recentMenuClicks.add(userId);
    setTimeout(() => recentMenuClicks.delete(userId), delay);

    await ctx.answerCbQuery();

    await handler(ctx);
  };
}

const ADMIN = parseInt(process.env.ADMIN_OWNER_ID || '0', 10);

bot.command('start', async (ctx) => {
  const id = ctx.from.id;
  const username = ctx.from.username;

  if (isUserAllowed(id) || ADMIN === id) {
    return await sendWelcomeMessage(ctx);
  }

  ctx.reply(
    `‚õîÔ∏è –î–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.\nüÜî –í–∞—à user ID: <code>${id}</code>\nUsername: @${username || '–Ω–µ–º–∞—î'}`,
    { parse_mode: 'HTML' }
  );

  const requestMsg = await ctx.reply(
    'üîê –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø:',
    Markup.inlineKeyboard([
      Markup.button.callback('üîì –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø', `request_access_${id}`)
    ])
  );

  pendingRequests.set(id, {
    chatId: ctx.chat.id,
    messageId: requestMsg.message_id
  });
});

bot.action(/request_access_(\d+)/, async (ctx) => {
  const requestedId = parseInt(ctx.match[1]);
  const from = ctx.from;

  if (requestedId !== from.id) {
    return ctx.reply('‚ö†Ô∏è –¶–µ –Ω–µ –≤–∞—à –∑–∞–ø–∏—Ç.');
  }

  ctx.reply('üì© –ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');

  bot.telegram.sendMessage(
    ADMIN,
    `üì• <b>–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞:</b>\n\nüë§ <b>–Ü–º‚Äô—è:</b> ${from.first_name} ${from.last_name || ''}\nüÜî <b>ID:</b> <code>${from.id}</code>\nüîó <b>Username:</b> @${from.username || '–Ω–µ–º–∞—î'}`,
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ù–∞–¥–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø', callback_data: `approve_${from.id}_permanent` }],
          [{ text: '‚úÖ –ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 90 –¥–Ω—ñ–≤', callback_data: `approve_${from.id}_temporary` }],
          [{ text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_${from.id}` }]
        ]
      }
    }
    );
});

bot.action(/approve_(\d+)_(permanent|temporary)/, async (ctx) => {
  const adminId = ctx.from.id;
  if (ADMIN !== adminId) return ctx.reply('‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.');

  const userId = parseInt(ctx.match[1]);
  const permissionType = ctx.match[2] as 'permanent' | 'temporary';

  // –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  let chat;
  try {
    chat = await bot.telegram.getChat(userId);
  } catch (err) {
    console.error('‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err);
    return ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
  }

  if (!chat || chat.type !== 'private') {
    return ctx.reply('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ ‚Äî —Ü–µ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.');
  }

  // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏
  const result = await addUserIfNotExists({
    user_id: chat.id,
    first_name: chat.first_name,
    last_name: chat.last_name || null,
    username: chat.username || null,
    permission_type: permissionType,
    date_added: '',
    end_date: null
  });

  // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, —è–∫—â–æ –≤–æ–Ω–æ —î
  try {
    if (ctx.update.callback_query?.message) {
      const message = ctx.update.callback_query.message;

      await bot.telegram.deleteMessage(message.chat.id, message.message_id);
    }
  } catch (err: any) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏:', err);
  }

  // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
  const userInfo = pendingRequests.get(userId);
  if (userInfo) {
    try {
      await bot.telegram.deleteMessage(userInfo.chatId, userInfo.messageId);
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', e instanceof Error ? e.message : e);
    }
    pendingRequests.delete(userId);
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—É
  await ctx.reply(result);

  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  if (!result.includes('–≤–∂–µ –¥–æ–¥–∞–Ω–∏–π')) {
    await bot.telegram.sendMessage(userId, '‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!');
    await sendWelcomeMessage(bot.telegram, userId);
  } else {
    await bot.telegram.sendMessage(userId, '‚ö†Ô∏è –í–∏ –≤–∂–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞.');
  }
});

bot.command('users', async (ctx) => {
  if (ADMIN !== ctx.from.id) return ctx.reply('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.');

  const users = getAllUsers();

  if (users.length === 0) {
    return ctx.reply('üïµüèº‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
  }

  for (const user of users) {
    const dateNormalized = user.date_added.split('T')[0];
    const endDateNormalized = user.end_date?.split('T')[0] || null;

    const text = `üë§ <b>${user.first_name || ''} ${user.last_name || ''}</b>
      üÜî <code>${user.user_id}</code>
      üîó @${user.username || '–Ω–µ–º–∞—î'}
      üóì –î–æ–¥–∞–Ω–æ: ${dateNormalized}
      ‚è≥ –¢–∏–ø –¥–æ—Å—Ç—É–ø—É: ${user.permission_type === 'temporary' ? '–Ω–∞ 90 –¥–Ω—ñ–≤' : '–Ω–∞–∑–∞–≤–∂–¥–∏'}
      ${user.end_date ? `üìÖ –î–æ: ${endDateNormalized}` : ''}`;

    await ctx.reply(text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[
          { text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${user.first_name || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'} ${user.last_name || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`, callback_data: `delete_user_${user.user_id}` }
        ]]
      }
    });
  }
});

bot.action(/delete_user_(\d+)/, async (ctx) => {
  if (ADMIN !== ctx.from.id) {
    return ctx.answerCbQuery('‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.');
  }

  const userId = parseInt(ctx.match[1]);
  const success = await removeUser(userId);

  if (success) {
    await ctx.answerCbQuery('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ');

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
    try {
      if (ctx.update.callback_query?.message) {
        const message = ctx.update.callback_query.message;
        await bot.telegram.deleteMessage(message.chat.id, message.message_id);
      }
    } catch (err) {
      console.error('‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é:', err);
    }

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    try {
      await bot.telegram.sendMessage(
        userId,
        '‚õîÔ∏è –í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
      );
    } catch (e) {
      // –Ø–∫—â–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    }

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    await ctx.reply(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
  } else {
    await ctx.answerCbQuery('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
  }
});

bot.use(async (ctx, next) => {
  const username = ctx.from?.username;
  const userId = ctx.from?.id;

  if (!userId) {
    // –Ø–∫—â–æ –Ω–µ–º–∞—î info –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    return;
  }

  if (isUserAllowed(userId) || ADMIN === userId) {
    // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É
    return next();
  } else {
    // –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä–∏—Ç–æ
    await ctx.editMessageText(`‚õîÔ∏è –î–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.\nüÜî –í–∞—à user ID: <code>${userId}</code>\nUsername: @${username || '–Ω–µ–º–∞—î'}`);
   
    const requestMsg = await ctx.reply(
      'üîê –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø:',
      Markup.inlineKeyboard([
        Markup.button.callback('üîì –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø', `request_access_${userId}`)
      ])
    );

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞—Ä—Ç—É (—â–æ–± –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª–∏—Ç–∏)
    pendingRequests.set(userId, {
      chatId: ctx.chat!.id,
      messageId: requestMsg.message_id
    });
  }
});

bot.action('work_out', debounceAction(async (ctx) => {
  let videoCounter = 0;

  const videoButtons = videoList.map((video: VideoType) => {
      const shortId = `vid${videoCounter++}`;
      fileIdMap.set(shortId, video.fileId);

    return [Markup.button.callback(video.fileName, `play_video:${shortId}`)];
  });

  videoButtons.push([Markup.button.callback('‚Æê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é', 'return_to_menu')]);

  await ctx.editMessageText('–û—Å—å —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', Markup.inlineKeyboard(videoButtons));
}));

bot.action(/play_video:(.+)/, async (ctx) => {
  const shortId = ctx.match[1];
  const fileId = fileIdMap.get(shortId);
  const chatId = ctx.chat?.id;

  if (!fileId) {
    return ctx.reply('‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  }

  if (!chatId) {
    return ctx.reply('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Ç.');
  }

  await ctx.answerCbQuery();

  await deletePreviousVideo(chatId, ctx.telegram, lastVideoMessageMap);


  const sendVideo = await ctx.replyWithVideo(fileId, {
    caption: '–û—Å—å –≤–∞—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!',
  });

  lastVideoMessageMap.set(chatId, sendVideo.message_id);
});

bot.action('benefits', debounceAction(async (ctx) => {
    await ctx.editMessageText('–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–∏:\n\n‚úÖ –ü–æ—Å—Ç—É–ø–æ–≤–∞ –ø–æ–±—É–¥–æ–≤–∞ –≥–Ω—É—á–∫–æ—Å—Ç—ñ ‚Äî –±–µ–∑ –±–æ–ª—é, –Ω–∞–¥—Ä–∏–≤—ñ–≤ —Ç–∞ –∑–∞–π–≤–æ–≥–æ —Å—Ç—Ä–µ—Å—É\n‚úÖ –ü–æ—î–¥–Ω–∞–Ω–Ω—è —Å—Ç—Ä–µ—Ç—á–∏–Ω–≥—É —Ç–∞ –º‚Äô—è–∫–∏—Ö —Å–∏–ª–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ ‚Äî –¥–ª—è –∑–¥–æ—Ä–æ–≤–∏—Ö —Å—É–≥–ª–æ–±—ñ–≤ —ñ –º‚Äô—è–∑—ñ–≤\n‚úÖ –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ–∫–∏, –¥–∏—Ö–∞–Ω–Ω—è —ñ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —É –ø–æ–∑–∏\n‚úÖ –ú–æ–∂–Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å —É –∑—Ä—É—á–Ω–æ–º—É —Ç–µ–º–ø—ñ —Ç–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ñ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ñ\n‚úÖ –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∑–∞–Ω—è—Ç—å –≤–¥–æ–º–∞, —Ç–æ–±—ñ –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è –ª–∏—à–µ –∫–∏–ª–∏–º–æ–∫, –π–æ–≥–∞ –±–ª–æ–∫–∏ —Ç–∞ —Ä—É—à–Ω–∏–∫.',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚Æê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é', 'return_to_menu')]
    ]));
}));

bot.action('about', debounceAction(async (ctx) => {
    await ctx.editMessageText('–¶—è –ø—Ä–æ–≥—Ä–∞–º–∞ –ø—ñ–¥—ñ–π–¥–µ: \n\nüîπ –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—è–º, —è–∫—ñ —Ö–æ—á—É—Ç—å –±–µ–∑–ø–µ—á–Ω–æ –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –≥–Ω—É—á–∫—ñ—Å—Ç—å\nüîπ –¢–∏–º, —Ö—Ç–æ –≤—ñ–¥—á—É–≤–∞—î –Ω–∞–ø—Ä—É–∂–µ–Ω–Ω—è —É —Å–ø–∏–Ω—ñ, –Ω–æ–≥–∞—Ö, —Ç–∞–∑—ñ ‚Äî —ñ –ø—Ä–∞–≥–Ω–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—è\nüîπ –¢–∞–Ω—Ü—ñ–≤–Ω–∏–∫–∞–º, —Ñ—ñ—Ç–Ω–µ—Å-–µ–Ω—Ç—É–∑—ñ–∞—Å—Ç–∞–º, —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º —è–∫ –¥–æ–¥–∞—Ç–æ–∫ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω—ñ–Ω–≥—É\nüîπ –£—Å—ñ–º, —Ö—Ç–æ –º—Ä—ñ—î –ø—Ä–æ —à–ø–∞–≥–∞—Ç–∏, –ª–µ–≥–∫–µ —Ç—ñ–ª–æ –π –≥–∞—Ä–Ω—É –ø–æ—Å—Ç–∞–≤—É',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚Æê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é', 'return_to_menu')]
    ]));
}));

bot.action('motivation', debounceAction(async (ctx) => {
    await ctx.editMessageText('–ù–µ–≤–∞–∂–ª–∏–≤–æ, –∑ —á–æ–≥–æ —Ç–∏ –ø–æ—á–∏–Ω–∞—î—à ‚Äî –≤–∞–∂–ª–∏–≤–æ, —â–æ —Ç–∏ –ø–æ—á–∏–Ω–∞—î—à.\n\n–¢–≤–æ—î —Ç—ñ–ª–æ –≤–∂–µ –¥—è–∫—É—î —Ç–æ–±—ñ –∑–∞ —Ü–µ–π –∫—Ä–æ–∫. –†–æ–∑—Ç—è–≥—É—é—á–∏ –º‚Äô—è–∑–∏, —Ç–∏ —Ä–æ–∑—à–∏—Ä—é—î—à —Å–≤–æ—ó –º–µ–∂—ñ ‚Äî –Ω–µ –ª–∏—à–µ —Ñ—ñ–∑–∏—á–Ω–æ, –∞ –π –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ. –ü–æ–¥–∞—Ä—É–π —Å–æ–±—ñ —Ü—é –ø–æ–¥–æ—Ä–æ–∂ –¥–æ —Å–µ–±–µ. –¢–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –±—É—Ç–∏ –≤—ñ–ª—å–Ω–æ—é/–≤—ñ–ª—å–Ω–∏–º —É –∫–æ–∂–Ω–æ–º—É —Ä—É—Å—ñ üí´',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚Æê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é', 'return_to_menu')]
    ]));
}));

bot.action('return_to_menu', debounceAction(async (ctx) => {
  const chatId = ctx.chat?.id;

  if (chatId) {
    await deletePreviousVideo(chatId, ctx.telegram, lastVideoMessageMap);
  }

  const messageText =
    '–í—ñ—Ç–∞—é —Ç–µ–±–µ —É –º–æ—ó–π –∞–≤—Ç–æ—Ä—Å—å–∫—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ –æ–Ω–ª–∞–π–Ω-—Å—Ç—Ä–µ—Ç—á–∏–Ω–≥—É! ü•≥üéä\n\n' +
    '–¶–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±—ñ—Ä –≤–ø—Ä–∞–≤ ‚Äî —Ü–µ —à–ª—è—Ö –¥–æ –≥–Ω—É—á–∫–æ—Å—Ç—ñ, –ª–µ–≥–∫–æ—Å—Ç—ñ —Ä—É—Ö—ñ–≤ —Ç–∞ –≥–∞—Ä–º–æ–Ω—ñ—ó –∑ –≤–ª–∞—Å–Ω–∏–º —Ç—ñ–ª–æ–º. ' +
    '–ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 6 –≤—ñ–¥–µ–æ, –∫–æ–∂–Ω–µ –∑ —è–∫–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–µ –∑ –ª—é–±–æ–≤‚Äô—é, –∑–Ω–∞–Ω–Ω—è–º –∞–Ω–∞—Ç–æ–º—ñ—ó —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è–º –ø–æ—Ç—Ä–µ–± —Ä—ñ–∑–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.\n\n' +
    '–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–∞ –∫–∏–ª–∏–º–∫—É!üßòüèº‚Äç‚ôÄÔ∏è\n\n' +
    '–ó –ª—é–±–æ–≤‚Äô—é,ü´∂üèº\n–ö–∞—Ç–µ—Ä–∏–Ω–∞ –ì–æ—Ä–±–∞–Ω—å';

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('ü§∏üèº‚Äç‚ôÄÔ∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', 'work_out')],
    [Markup.button.callback('‚úÖ –ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–∏:', 'benefits')],
    [Markup.button.callback('üîπ –¶—è –ø—Ä–æ–≥—Ä–∞–º–∞ –ø—ñ–¥—ñ–π–¥–µ:', 'about')],
    [Markup.button.callback('üí´ –ú–æ—Ç–∏–≤–∞—Ü—ñ—è –≤—ñ–¥ –º–µ–Ω–µ:', 'motivation')],
  ]);

  await ctx.editMessageText(messageText, keyboard);
}));

(async () => {
  try {
    console.log('üîΩ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ Google Drive...');
    await downloadDatabaseFromDrive();
    console.log('‚úÖ –ë–∞–∑—É –¥–∞–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.');
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–∞–∑—É –∑ Google Drive. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É.');
    initDB(dbPath);
  }

  initDB(dbPath);

  db = getDB();

  await bot.launch();
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
